@namespace("org.spf4j.failsafe.avro")
protocol Execution {

    /** a record to describe backoff parameters.
      the backoff algorythm is basically a tweakable fibonaccy backoff */
    @beta
    record RetryParams {

      /**
       * In case of a error is encountered, this is the number of immediate initial retries.
       * these retries are done without any delay. This is to leverage a existing selection algorithm
       * (like select a different destination host).
       */
      int nrInitialImmediateRetries = 2;

      /** backoff start delay. This is the first delay after the immediate retries are exhausted */
      long startDelayNanos = 1000000;

      /** backoff max delay. This is the max delay that the fibonacci delay increase leads to */
      long maxDelayNanos = 2000000000;

      /** A Random jitter up to this factor will be applied to the retry delay.
          This help with retries of contention errors. Use zero for no jitter */
      double retryDelayJitter = 0.3;

      /** maximum number of retries */
      int maxNrRetries = 20;

      /** maximum amount to retry relative to timeout */
      double maxTimeToRetryFactor = 1.0;

      /** the maximum amount of time to retry, a negative value implies that the max retry time is the context deadline */
      long maxTimeToRetryNanos = -1;
    }


    /** Response 2 retry rule mappings */
    @beta
    record ResponseRetryRules {
      /** response name 2 retry params mappings */
      map<RetryParams> response2RetryParams = {};
    }


    /** A scripted retry rule */
    @beta
    record ScriptedRetryPredicateSupplier {

      /** The name of the script executor to lookup */
      string language = "zel";

      /**
       * the script which is a implementation of:
       * (long, long) ->   (Object value, Callable<Object>) -> RetryDecision
       */
      string returnPredicateSupplier = "";

      /**
       *  the script which is a implementation of:
       *  (long, long) ->   (Throwable value, Callable<Object>) -> RetryDecision
       */
      string throwablePredicateSupplier = "";

    }

    /** 
     * A custom named retry rule, The entire retry predicate is expressed via native logic in your app.
     * Custom rules are registered via the ServiceLoader mechanism.
     */
    @beta
    record RetryRule {
      /** the rule name */
      string name;

      /** the retry predicate implementation, if null, implementation will be looked up via the ServiceLoader mechanism */
      union {null, ScriptedRetryPredicateSupplier} predicateSupplier = null;
    }

    /** a record to describe a retry policy */
    @beta
    record RetryPolicy {

      /**
       * when retry fails,
       * the resulting exception will contain the previous failure exceptions in their suppression chain.
       * this provides more insight into what went wrong in a retryable operation.
       */
      int maxSupressedExceptions= 20;

      /** default retry parameters. Default retry parameters for all response retry rules */
      RetryParams defaultRetryParameters = {};

      /** Error retry rules */
      array<RetryRule>  retryRules = [];

      mixin ResponseRetryRules;

    }

    /** a record to describe a hedge policy */
    @beta
    record TimeoutRelatimeHedgePolicy {

      /** Minimum hedge delay nanos */
      long minHedgeDelayNanos = 0;

      /** maximum hedge delay nanos */
      long maxHedgeDelayNanos = 0;

      /** timeout factor */
      double factor = 0;

      /** number of hedges (number of parallel requests made) */
      long nrHedges = 1;

    }


    /** a record to describe a execution policy */
    @beta
    record ExecutionPolicy {
      /**
       * maximum amount of time for execution of operation. (includes all retries)
       * Local context deadline can overwrite this value for a operation to something smaller based on the deadline.
       */
      long overallTimeoutNanos;
      /**
       * maximum amount of time  for execution attempt of operation.
       * Local context deadline can overwrite this value for a operation to something smaller based on the deadline.
       */
      long attemptTimeoutNanos;
      /** The retry policy, null if no retries */
      union {null, RetryPolicy} retryPolicy = null;
      /** the hedging policy, null if no hedging */
      union {null, TimeoutRelatimeHedgePolicy} hedgePolicy = null;
      /** circuit breaker on for this operation. This provides a way to disable a invocation manually via config */
      boolean circuitBreaker = false;
    }

    /**
     * A set of operations and their execution policies.
     */
    @beta
    record OperationExecutionPolicies {
      /**
       * operation name -> Execution policy map
       * where operation name ca be [client_id?].[app scope?].[operation name]
       * this allows control over execution policies at your choice of granularity.
       */
      map<ExecutionPolicy> operationPolicies = {};
    }
   

}
