@namespace("org.spf4j.base.avro")
protocol Core {

    /** a instant type */
    @logicalType("instant")
    record Instant {
      /** nr seconds since UNIX epoch */
      long epochSecond;
      /** nanosecond component */
      int nano;
    }

    /** Any type */
    @logicalType("any")
    record Any {
      /** the avro schema of this object */
      string avsc;
      /** the content serializes as avro binary according to the schema from the avsc field */
      bytes content;
    }

    /**
     * record representing a method, it is not uniquely identifying a method, since
     * methods can be overloaded with different arguments
     */
    @Immutable
    record Method {
      /** the declaring class of the method. */
      string declaringClass;
      /** the name of the method */
      string name;
    }

    /** record representing the samples where a particular method was executed */
    record StackSampleElement {
      /** the id of the sample */
      int id;
      /** the parent sample where current method was executed from. -1 for root */
      int parentId;
      /** the number of time this records method has been caught in execution */
      int count;
      /** the method caught in execution */
      Method method;
    }

    /** Some stack samples */
    record StackSamples {
      /** the collection of samples */
      array<StackSampleElement> stackSamples = [];
    }


    /** record representing a package(jar) archive info */
    @beta
    record PackageInfo {
      /** the package location url */
      string url = "";
      /** package version from manifest  */
      string version = "";
    }

    /** a location in a file */
    @beta
    record FileLocation {
      /** file name */
      string fileName;
      /** line number, -1 when not available */
      int lineNumber = -1;
      /** column number, -1 when not available */
      int columnNumber = -1;
    }

    /** record representing a Stack trace. */
    @beta
    record StackTraceElement {
      /** the method of the stack trace element */
      Method method;
      /** location, null when location not available */
      union {null, FileLocation} location = null;
      /** package info, null when package info not available */
      union {null, PackageInfo} packageInfo = null;
    }

    /** a throwable (Exception) */
    @beta
    record Throwable {
      /** exception class name */
      string className;
      /** exception message, java exceptions will null message will have this as empty string */
      string message = "";
      /** the stack trace */
      array<StackTraceElement> stackTrace = [];
      /** exception cause, null when there is not cause */
      union {null, Throwable} cause = null;
      /** suppressed exceptions */
      array<Throwable> suppressed = [];
    }

    /** A log level, semantics in line with slf4j */
    enum LogLevel {
      UNKNOWN,
      TRACE,
      DEBUG,
      INFO,
      WARN,
      ERROR
    } = UNKNOWN;

    /** a log record */
    @beta
    @Mutable
    record LogRecord {
      /** origin of the log, empty string when not available */
      string origin = "";
      /** trace id, empty string for none */
      string trId = "";
      /** Log level */
      LogLevel level = "UNKNOWN";
      /** log record timestamp*/
      @logicalType("instant")
      string ts;
      /** logger name */
      string logger;
      /** thread name */
      string thr;
      /** log message */
      string msg;
      /** extra log message payload */
      @logicalType("json_array")
      string xtra = "[]";
      /** named attributes (aka tags) */
      map<@logicalType("json_any") string> attrs = {};
      /** a optional throwable, null when none */
      union {null, Throwable} throwable = null;

      mixin StackSamples;
    }

    /** a record that describes debug detail */
    @beta
    record DebugDetail {
      /** origin detail */
      string origin = "";

      /** logs */
      array<LogRecord> logs = [];

      /** a optional throwable, null when none */
      union {null, Throwable} throwable = null;
      
      mixin StackSamples;

    }

    /** a record to describe a service error */
    @beta
    record ServiceError {
      /** a error code, Defaults to internal serve error */
      int code = 500;
      /** a string describing the type of the error, ex: the exception type */
      string type = "";
      /** a error message */
      string message;
      /** additional structured information regarding this error, null if no additional info is provided */
      union {null, Any} payload = null;
      /**
       * optional (when null) debug detail, will be missing when:
       * a client does not desire it.
       * when  client is  not entitled to access it(across security boundaries, etc).
       */
      union {null, DebugDetail} detail = null;
    }


    /** A health status */
    enum HealthStatus {
      HEALTHY,
      UNKNOWN,
      UNHEALTHY
    } = UNKNOWN;

    /** A component health record */
    @beta
    record HealthRecord {

      /** the origin of this health record */
      string origin = "";

      /** the path of the component that this record applies to, "" for implicit(context known) */
      string name = "";

      /** The health state of this component */
      HealthStatus status = "UNKNOWN";

      /**
       * optional (when null) debug detail, will be missing when:
       *
       * a client does not desire it. component is healthy.
       * when  client is  not entitled to access it.
       * across security boundaries.
       */
      union {null, DebugDetail} detail = null;

      /** the health of the sub-components, if any */
      array<HealthRecord> componentsHealth = [];

    }

    /** a path entry */
    @beta
    record HealthCheckInfo {

      /** name, ""  when implicit (root) */
      string name  = "";

      /** check description */
      string description = "";

      /** component infos if available */
      array<HealthCheckInfo> componentInfos = [];

    }

    /** organization info */
    @beta
    record Organization {
      /** organization name */
      string name;
      /** organization site */
      @logicalType("url")
      string site;
    }

    /** application information metadata */
    @beta
    record ApplicationInfo {
      /** application name */
      string name;
      /** application description */
      string description = "";
      /** application  site */
      @logicalType("url")
      string site;
      /** application organization, null if no organization */
      union {null, Organization} ownerOrg = null;
    }

    /** network protocol */
    @beta
    enum NetworkProtocol {TCP, UDP, SCTP, UNKNOWN} = UNKNOWN;

    /** a network service descriptor: ex: (http, 80, tcp)*/
    @beta
    record NetworkService {
      /** service name */
      string name;
      /** port number */
      int port;
      /** network protocol */
      NetworkProtocol netProtocol;
    }

    /** process information */
    @beta
    record ProcessInfo {
      /** a string uniquely identifying the process instance */
      string instanceId;
      /** Process name */
      string name = "";
      /** the host name */
      string hostName;
      /** the process PID */
      int processId;
      /** the java runtime version */
      string jreVersion;
      /** the application version */
      string appVersion;
      /** the build id, version control revision ID/Number */
      string buildId = "";
      /** build time-stamp, null when not available (missing from app manifest) */
      union {null, @logicalType("instant") string} buildTimeStamp = null;
      /** network services served by this process */
      array<NetworkService> networkServices = [];
    }

    /** Cluster information */
    @beta
    record ClusterInfo {
       /** application info */
      ApplicationInfo appInfo;

      /** processes info */
      array<ProcessInfo> processes;
    }


    /** represents a internet [media type](http://en.wikipedia.org/wiki/Internet_media_type) like: application/json */
    record MediaType {
      /** the media type, examples: application, text,...*/
      string type = "*";
      /** the media subtype, examples: json, plain, ... */
      string subType = "*";
      /** the media type parameters, examples: charset=UTF-8 */
      map<string> parameters = {};
    }

    /** ordering type (ascending/descending) */
    enum Order {ASC, DESC}

    /** File type */
    enum FileType {
      UNKNOWN, REGULAR, DIRECTORY
    } = UNKNOWN;

    /** File entry */
    @beta
    record FileEntry {
      /** file type */
      FileType type = "REGULAR";
      /** file name */
      string name;
      /** file size */
      long size = -1;
      /** last modified, null when  attr is not available/supported */
      union {null, @logicalType("instant") string} lastModified = null;
    }

    /**
     * HTTP method enum. [rfc7231](https://tools.ietf.org/html/rfc7231#section-4)
     * [rfc5789](https://tools.ietf.org/html/rfc5789#section-2)
     */
    enum HttpMethod {GET, HEAD,  PUT, POST, DELETE, PATCH, OPTIONS, CONNECT, TRACE, UNKNOWN} = UNKNOWN;

    /**
     * A REST reference, [see](https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design)
     */
    @beta
    record Link {
      /** relationship */
      string rel =  "self";
      /** the URI of the entity */
      string @logicalType("uri") href;
      /** the HTTP method */
      HttpMethod action = "UNKNOWN";
      /** The supported content types */
      array<string> types = [];
    }


}
