@namespace("org.spf4j.tsdb2.avro")
protocol Tsdb2 {

  /**
   * measurement type.
   */
  enum MeasurementType {
      /** a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart. */
      COUNTER,
      /** a single numerical value that can arbitrarily go up and down. */
      GAUGE,
      /** A histogram samples observations (usually things like request durations or response sizes) and counts them in configurable buckets */
      HISTOGRAM,
      /** a summary samples observations */
      SUMMARY,
      /** Some custom metric */
      UNTYPED
    } = UNTYPED;


  /**
   * Aggregation.
   */
   enum Aggregation {
      UNKNOWN,
      NONE,
      SUM,
      MIN,
      MAX,
      FIRST,
      LAST
   } = UNKNOWN;

    /** file header */
    record Header {
        /** file content schema */
        string contentSchema;
        /** file description */
        string description = "";
    }

    /** type of the numeric value */
    enum Type {LONG, DOUBLE}

    /** column definition */
    record ColumnDef {
        /** column name */
        string name;
        /** column value type */
        Type type = "LONG";
        /** unit of measurement for the data */
        string unitOfMeasurement;
        /** Column description */
        string description = "";
        /** the column aggregation, if the column value is an aggregate of multiple measurements */
        Aggregation aggregation = "UNKNOWN";
    }

    /** table definition, name, column names and descriptions */
    @Mutable
    record TableDef {
        /** def id */
        long id = -1;
        /** table name */
        string name;
        /** table description */
        string description = "";
        /** column definitions */
        array<ColumnDef> columns = [];
        /** the interval, in milliseconds that is measurement is collected */
        int sampleTime;
        /** measurement type */
        MeasurementType measurementType = "UNTYPED";
    }
    
    /** data row */
    record DataRow {
        /** row relative timestamp */
        int relTimeStamp;
        /** the file pointer where the Table definition for the data is */
        long tableDefId;
        /** the row data */
        array<long> data;
    }

    /** a block of table data */
    record DataBlock {
        /** the UTC timestamp that all timestamps in this block are relative to */
        long baseTimestamp;
        /** rows */
        array<DataRow> values = [];
    }
}